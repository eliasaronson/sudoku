
public class Sudoku {

    private int sudoku[][];
    private int n = 9;

    public Sudoku(int sudoku[][]) {
        this.sudoku = sudoku;
    }

    public int getNumber(int l, int k) {
    		return sudoku[l][k];
    }
    
    public int setNumber(int r, int c, int n) {
		sudoku[r][c] = n;
		return n;
	}
    
    public void print() {
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				System.out.print(sudoku[i][j] + " ");
			}
			System.out.println();
		}
	}
    
    /** anropar metoden backtracksolve för att se om sudokut går att lösa */
    public boolean solve() {
    	
        if(backtrackSolve(0,0))
        {
        	return true;
        }
        else 
        {
        	System.out.println("Sudokut går inte att lösa");
        	return false;
        }
    }
    
    private boolean backtrackSolve(int row, int col)
    {
    	if(row == 9)
    	{
    		return true;
    	}
    	if(sudoku[row][col] == 0)
    	{
    		for (int i = 1; i <= 9; i++) 
    		{
				sudoku[row][col] = i;
				
				if(ifPossible(row, col))
				{
					if(col == 8)
					{
						if(backtrackSolve(row + 1, 0))
						{
							return true;
						}
					}
					else
					{
						if(backtrackSolve(row, col + 1))
						{
							return true;
						}
					}
				}
			}
    		sudoku[row][col] = 0;
			return false;
    	}
    	else
    	{
    		if(ifPossible(row, col))
    		{
    			if(col == 8)
    			{
    				if(backtrackSolve(row + 1, 0))
    				{
    					return true;
    				}
    			}
    			else
    			{
    				if(backtrackSolve(row, col + 1))
    				{
    					return true;
    				}
    			}
    		}
    	}
    	return false;
    }
  
    /**Kollar om det är möjligt att sätta x i en viss specifik ruta */
    public boolean ifPossible(int row, int col) {
    	
        /** Undersöker om x finns med på brädan horisontellt och vertikalt, dvs i de olika raderna. Om den finns returneras false */
        for (int i = 0; i < n; i++) {
            if (sudoku[row][i] == sudoku[row][col] && i != col) {
                return false;
            }
            if (sudoku[i][col] == sudoku[row][col] && i != row) {
                return false;
            }
        }
        /** Undersöker om x finns inom en viss region, 3x3 box */
        int r = row - row % 3;
        int c = col - col % 3;

        for (int ii = r; ii < 3 + r ; ii++) {
            for (int jj = c; jj < 3 + c; jj++) {
                if ((sudoku[ii][jj] == sudoku[row][col]) && ii != row && jj != col) {
                    return false;
                }
            }
        }
        return true;
    }
}



